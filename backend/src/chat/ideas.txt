	To do:
  - change storage to Redis
	- put all work in service page
  

	- See if messages/rooms should be stored in the cache or that prisma suffices
	- Move respective reconnection issues to gameService/chatService
	- Implement a message queue?

	Functions: 
	(**** only if it's easy and we have time for it)

	General functions:

		findAllMessages(room): Promise <array>
		- returns message history from prisma/Redis?

		createMessage(room, message)
		- creates message in prisma
		- creates message in Redis?

		sendMessage(room, message)
		- emits message to room

		****isTyping()
		- lets other room/DM-users know that someone is typing
		
		blockUser(user2Bblocked)
		- mutes future messages from user2Bblocked

		unblockUser(user2Bunblocked)
		- unmutes future messages from user2Bunblocked

	Channel functions:
	
		createChannel(room, status)
		- creates a channel, either for DM's or channels
		- sets creator as channel owner
		- sets channel to either public, private or direct
		- if private, sets password
		DONE
	
		joinChannel(room)
		- checks if channel exists
		- checks if its public/private/direct
		- joins channel
		- emits a message that user has joined the channel
		DONE

		leaveChannel(room)
		- removes user from channel
		- emits a message that user has left the channel

		closeChannel(room)
		- check if user is administrator
		- emit a message that channel will be closed?
		- unjoin all users from room  

		setChannelPassword()
		- checks if user is owner
		- creates a password
		- sets channel status to private
		DONE
	
		addAdministrator(user2Badmin)
		- checks if user is owner
		- gives the user2Badmin permissions
		DONE

		removeAdministrator(admin)
		- checks if user is owner
		- checks if admin is not the channel owner (creator)
		- if not, takes away admin's permissions
		DONE
		
		kickUser(user2Bkicked)
		- checks if user is administrator
		- removes user2Bkicked from the channel

		banUser(user2Bbanned)
		- checks if user is administrator
		- kicks user2Bbanned from channel
		- puts user2Bbanned on a blacklist

		muteUser(user2Bmutes)
		- checks if user is administrator
		- ignored the messages of user2Bmutes for a certain time period

		listUsers()
		- returns a list of users in the room