// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  /// basic info
  id                 String   @id @unique @default(uuid())
  createdAt          DateTime @default(now())
  email              String   @unique
  userName           String   @unique
  avatar             String   @default("defaultAvatar.jpg")
  isFourtyTwoStudent Boolean  @default(false)
  status             Status   @default(ONLINE)

  /// authentification
  password       String
  twoFAActivated Boolean @default(false)
  twoFASecret    String?

  /// community
  friends               String[]
  friendRequestsSent     String[]
  friendRequestsReceived String[]
  rooms                 UserInRoom[] @relation("connecting User to UserInRoom")

  /// statistics
  gamesWon    	Int		@default(0)
  gamesLost   	Int		@default(0)
  achievements  Achievement[] @unique

  ///historics
  games Game[] @relation("player")
}

model jwtBlacklist {
  id     Int    @id @default(autoincrement())
  userID String @unique @default(uuid())
  token  String @unique
}

model Game {
  gameId    Int      @id @default(autoincrement())
  players   User[]   @relation("player")
  winnerId  String
  loserId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  name      String     		@id @unique @default(uuid())
  status    RoomStatus
  password  String?
  owner     String 				// this is user e-mail (because they can not change it)
  createdAt DateTime   		@default(now())
  messages  Message[]  		@relation("message")
  users     UserInRoom[] 	@relation("connecting Room to UserInRoom")
}

model UserInRoom {
  id       String  @id @unique @default(uuid())
  user     User    @relation("connecting User to UserInRoom", fields: [email], references: [email])
  email    String
  room     Room    @relation("connecting Room to UserInRoom", fields: [roomID], references: [name])
  roomID   String
  isMuted  Boolean @default(false)
  isBanned Boolean @default(false)
  role     Role    @default(USER)
}

model Message {
  id       Int      @id @default(autoincrement())
  text     String
  sendtime DateTime @default(now())
  sender   String 	// this is the username
  room     Room     @relation("message", fields: [roomID], references: [name])
  roomID   String   @unique
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum Status {
  ONLINE
  AWAY
  OFFLINE
  PLAYING
  WAITING
}

enum Achievement {
  WINNER
  FRIEND
  TWOFA
  JOIN
  FIRST
}

enum RoomStatus {
  PUBLIC
  PRIVATE
  DIRECT
}
